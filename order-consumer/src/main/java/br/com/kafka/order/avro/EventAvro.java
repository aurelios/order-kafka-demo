/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.kafka.order.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EventAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6764297605626386494L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventAvro\",\"namespace\":\"br.com.kafka.order.avro\",\"fields\":[{\"name\":\"newPayload\",\"type\":{\"type\":\"record\",\"name\":\"OrderAvro\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"total\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"user\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"UserAvro\",\"fields\":[{\"name\":\"login\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"default\":null}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventAvro> ENCODER =
      new BinaryMessageEncoder<EventAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventAvro> DECODER =
      new BinaryMessageDecoder<EventAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EventAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EventAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EventAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EventAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EventAvro from a ByteBuffer. */
  public static EventAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private br.com.kafka.order.avro.OrderAvro newPayload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventAvro() {}

  /**
   * All-args constructor.
   * @param newPayload The new value for newPayload
   */
  public EventAvro(br.com.kafka.order.avro.OrderAvro newPayload) {
    this.newPayload = newPayload;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return newPayload;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: newPayload = (br.com.kafka.order.avro.OrderAvro)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'newPayload' field.
   * @return The value of the 'newPayload' field.
   */
  public br.com.kafka.order.avro.OrderAvro getNewPayload() {
    return newPayload;
  }


  /**
   * Creates a new EventAvro RecordBuilder.
   * @return A new EventAvro RecordBuilder
   */
  public static br.com.kafka.order.avro.EventAvro.Builder newBuilder() {
    return new br.com.kafka.order.avro.EventAvro.Builder();
  }

  /**
   * Creates a new EventAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventAvro RecordBuilder
   */
  public static br.com.kafka.order.avro.EventAvro.Builder newBuilder(br.com.kafka.order.avro.EventAvro.Builder other) {
    return new br.com.kafka.order.avro.EventAvro.Builder(other);
  }

  /**
   * Creates a new EventAvro RecordBuilder by copying an existing EventAvro instance.
   * @param other The existing instance to copy.
   * @return A new EventAvro RecordBuilder
   */
  public static br.com.kafka.order.avro.EventAvro.Builder newBuilder(br.com.kafka.order.avro.EventAvro other) {
    return new br.com.kafka.order.avro.EventAvro.Builder(other);
  }

  /**
   * RecordBuilder for EventAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventAvro>
    implements org.apache.avro.data.RecordBuilder<EventAvro> {

    private br.com.kafka.order.avro.OrderAvro newPayload;
    private br.com.kafka.order.avro.OrderAvro.Builder newPayloadBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.kafka.order.avro.EventAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.newPayload)) {
        this.newPayload = data().deepCopy(fields()[0].schema(), other.newPayload);
        fieldSetFlags()[0] = true;
      }
      if (other.hasNewPayloadBuilder()) {
        this.newPayloadBuilder = br.com.kafka.order.avro.OrderAvro.newBuilder(other.getNewPayloadBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing EventAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.kafka.order.avro.EventAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.newPayload)) {
        this.newPayload = data().deepCopy(fields()[0].schema(), other.newPayload);
        fieldSetFlags()[0] = true;
      }
      this.newPayloadBuilder = null;
    }

    /**
      * Gets the value of the 'newPayload' field.
      * @return The value.
      */
    public br.com.kafka.order.avro.OrderAvro getNewPayload() {
      return newPayload;
    }

    /**
      * Sets the value of the 'newPayload' field.
      * @param value The value of 'newPayload'.
      * @return This builder.
      */
    public br.com.kafka.order.avro.EventAvro.Builder setNewPayload(br.com.kafka.order.avro.OrderAvro value) {
      validate(fields()[0], value);
      this.newPayloadBuilder = null;
      this.newPayload = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'newPayload' field has been set.
      * @return True if the 'newPayload' field has been set, false otherwise.
      */
    public boolean hasNewPayload() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'newPayload' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public br.com.kafka.order.avro.OrderAvro.Builder getNewPayloadBuilder() {
      if (newPayloadBuilder == null) {
        if (hasNewPayload()) {
          setNewPayloadBuilder(br.com.kafka.order.avro.OrderAvro.newBuilder(newPayload));
        } else {
          setNewPayloadBuilder(br.com.kafka.order.avro.OrderAvro.newBuilder());
        }
      }
      return newPayloadBuilder;
    }

    /**
     * Sets the Builder instance for the 'newPayload' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public br.com.kafka.order.avro.EventAvro.Builder setNewPayloadBuilder(br.com.kafka.order.avro.OrderAvro.Builder value) {
      clearNewPayload();
      newPayloadBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'newPayload' field has an active Builder instance
     * @return True if the 'newPayload' field has an active Builder instance
     */
    public boolean hasNewPayloadBuilder() {
      return newPayloadBuilder != null;
    }

    /**
      * Clears the value of the 'newPayload' field.
      * @return This builder.
      */
    public br.com.kafka.order.avro.EventAvro.Builder clearNewPayload() {
      newPayload = null;
      newPayloadBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventAvro build() {
      try {
        EventAvro record = new EventAvro();
        if (newPayloadBuilder != null) {
          record.newPayload = this.newPayloadBuilder.build();
        } else {
          record.newPayload = fieldSetFlags()[0] ? this.newPayload : (br.com.kafka.order.avro.OrderAvro) defaultValue(fields()[0]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventAvro>
    READER$ = (org.apache.avro.io.DatumReader<EventAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
